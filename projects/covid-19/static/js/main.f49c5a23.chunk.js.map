{"version":3,"sources":["infoBox.js","util.js","Map.js","Table.js","LineGraph.js","App.js","serviceWorker.js","index.js"],"names":["Infobox","title","cases","active","isRed","total","props","Card","onClick","className","CardContent","Typography","color","casesTypeColors","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","Map","center","zoom","TileLayer","url","attribution","casesType","map","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","countries","Table","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormate","yAxes","gridLines","ticks","index","values","LineGraph","useState","setData","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","useEffect","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","name","iso2","sortedData","getCountriesData","onCountryChange","event","countryCode","target","latitude","longitude","console","log","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8YA0BeA,EAtBC,SAAC,GAAsD,IAApDC,EAAmD,EAAnDA,MAAOC,EAA4C,EAA5CA,MAAOC,EAAqC,EAArCA,OAAQC,EAA6B,EAA7BA,MAAOC,EAAsB,EAAtBA,MAAUC,EAAY,0DACrE,OACC,kBAACC,EAAA,EAAD,CACCC,QAASF,EAAME,QACfC,UAAS,kBAAaN,GAAU,oBAAvB,oBACPC,GAAS,eADF,aAGT,kBAACM,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBAC3CX,GAGF,wBAAIQ,UAAS,0BAAqBL,GAAS,0BAA4BF,GAEvE,kBAACS,EAAA,EAAD,CAAYF,UAAU,iBAAiBG,MAAM,iBAC3CP,EADF,a,sECbEQ,EAAkB,CACvBX,MAAY,CACXY,IAAa,UACbC,WAAa,KAEdC,UAAY,CACXF,IAAa,UACbC,WAAa,MAEdE,OAAY,CACXH,IAAa,UACbC,WAAa,MAIFG,EAAW,SAACC,GAGxB,OAFgB,YAAQA,GAENC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEnB,MAAQoB,EAAEpB,OAAS,EAAI,MAG/CqB,EAAkB,SAACC,GAAD,OAE9BA,EAAI,WAAOC,IAAQD,GAAME,OAAO,SAAY,MCP9BC,EAhBH,SAACrB,GACZ,OACC,yBAAKG,UAAU,OAEd,kBAAC,IAAD,CAASmB,OAAQtB,EAAMsB,OAAQC,KAAMvB,EAAMuB,MAC1C,kBAACC,EAAA,EAAD,CACCC,IAAI,qDACJC,YAAY,+EDoBY,SAACb,GAAD,IAAOc,EAAP,uDAAmB,QAAnB,OAC5Bd,EAAKe,KAAI,SAACC,GAAD,OACR,kBAACC,EAAA,EAAD,CACCR,OAAQ,CAAEO,EAAQE,YAAYC,IAAKH,EAAQE,YAAYE,MACvDC,YAAa,GACb5B,MAAOC,EAAgBoB,GAAWnB,IAClC2B,UAAW5B,EAAgBoB,GAAWnB,IACtC4B,OAAQC,KAAKC,KAAKT,EAAQF,IAAcpB,EAAgBoB,GAAWlB,YAEnE,kBAAC8B,EAAA,EAAD,KACC,yBAAKpC,UAAU,kBACJ,yBACGA,UAAU,YACVqC,MAAO,CAAEC,gBAAgB,OAAD,OAASZ,EAAQE,YAAYW,KAA7B,QACrC,yBAAKvC,UAAU,aAAa0B,EAAQA,SACpC,yBAAK1B,UAAU,kBAAf,UAAwCgB,IAAQU,EAAQjC,OAAOwB,OAAO,QACtE,yBAAKjB,UAAU,kBAAf,cAA4CgB,IAAQU,EAAQnB,WAAWU,OAAO,QAC9E,yBAAKjB,UAAU,eAAf,WAAsCgB,IAAQU,EAAQlB,QAAQS,OAAO,cClCrEuB,CAAc3C,EAAM4C,UAAW5C,EAAM2B,cCI3BkB,G,OAhBD,SAAC,GAAmB,IAAjBD,EAAgB,EAAhBA,UAChB,OACC,yBAAKzC,UAAU,SACbyC,EAAUhB,KAAI,gBAAGC,EAAH,EAAGA,QAASjC,EAAZ,EAAYA,MAAZ,OACd,4BAEC,4BAAKiC,GACL,4BACC,gCAASjC,W,QCPTkD,EAAU,CACbC,OAAQ,CACJC,SAAS,GAEbC,SAAU,CACNC,MAAO,CACHd,OAAQ,IAGhBe,qBAAqB,EACrBC,SAAU,CACNC,KAAM,QACNC,WAAW,EACXC,UAAW,CACPC,MAAO,SAAUC,EAAa5C,GAC1B,OAAOM,IAAQsC,EAAYC,OAAOtC,OAAO,WAIrDuC,OAAQ,CACJC,MAAO,CACH,CACIC,KAAM,OACNC,KAAM,CACF1C,OAAQ,aACR2C,eAAgB,QAI5BC,MAAO,CACH,CACIC,UAAW,CACPjB,SAAS,GAEbkB,MAAO,CACHX,UAAW,SAAUG,EAAOS,EAAOC,GAC/B,OAAOjD,IAAQuC,GAAOtC,OAAO,YA8DrCiD,EArDG,SAAC,GAAqC,IAAD,IAAnC1C,iBAAmC,MAAvB,QAAuB,EAAX3B,EAAW,+BAC5BsE,mBAAS,IADmB,mBAC9CzD,EAD8C,KACxC0D,EADwC,KAGhDC,EAAiB,SAAC3D,GAA+B,IAElD4D,EAFyB9C,EAAwB,uDAAZ,QACnC+C,EAAY,GAElB,IAAK,IAAIC,KAAQ9D,EAAKjB,MAAO,CAC5B,GAAI6E,EAAe,CAClB,IAAMG,EAAe,CACpBC,EAAIF,EACJG,EAAIjE,EAAKc,GAAWgD,GAAQF,GAE7BC,EAAUK,KAAKH,GAEhBH,EAAgB5D,EAAKc,GAAWgD,GAEjC,OAAOD,GAgBR,OAbAM,qBAAU,YACM,uCAAG,sBAAAjE,EAAA,sEACXkE,MAAM,6DACVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACrE,GACN,IAAM6D,EAAYF,EAAe3D,EAAMc,GACvC4C,EAAQG,MALO,2CAAH,qDASfW,KACE,CAAC1D,IAGH,yBAAKxB,UAAWH,EAAMG,WACpBU,GACDA,EAAKyE,OAAS,GACL,kBAAC,IAAD,CACAxC,QAASA,EACTjC,KAAM,CACF0E,SAAU,CACN,CACIC,gBAAiB,yBACjBC,YAAa,UACb5E,KAAMA,S,OCiDf6E,MAnIf,WAAgB,IAAD,EACsBpB,mBAAS,IAD/B,mBACN1B,EADM,KACK+C,EADL,OAEkBrB,mBAAS,aAF3B,mBAENzC,EAFM,KAEG+D,EAFH,OAG0BtB,mBAAS,IAHnC,mBAGNvC,EAHM,KAGO8D,EAHP,OAIsBvB,mBAAS,IAJ/B,mBAINwB,EAJM,KAIKC,EAJL,OAKsBzB,mBAAS,CAAEtC,IAAK,SAAUgE,KAAM,UALtD,mBAKNC,EALM,KAKKC,EALL,OAMkB5B,mBAAS,GAN3B,mBAMN6B,EANM,KAMGC,EANH,OAO4B9B,mBAAS,IAPrC,mBAON+B,EAPM,KAOQC,EAPR,OAQsBhC,mBAAS,SAR/B,mBAQN3C,EARM,KAQK4E,EARL,KAcdvB,qBAAU,WACTC,MAAM,sCAAsCC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACrE,GACrFgF,EAAehF,QAEd,IAEHmE,qBAAU,YAGa,uCAAG,sBAAAjE,EAAA,sEAClBkE,MAAM,4CAA4CC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAAQF,MAAK,SAACrE,GACjG,IAAM+B,EAAY/B,EAAKe,KAAI,SAACC,GAAD,MAAc,CACxC2E,KAAQ3E,EAAQA,QAChB6B,MAAQ7B,EAAQE,YAAY0E,SAGvBC,EAAa9F,EAASC,GAC5BkF,EAAaW,GACbJ,EAAgBzF,GAChB8E,EAAa/C,MAVU,2CAAH,qDActB+D,KACE,IAEH,IAAMC,EAAe,uCAAG,WAAOC,GAAP,iBAAA9F,EAAA,6DACjB+F,EAAcD,EAAME,OAAOrD,MACjCkC,EAAWkB,GAKVrF,EADmB,cAAhBqF,EACG,qCAEH,mDAA+CA,GAT5B,SAYjB7B,MAAMxD,GACVyD,MAAK,SAACC,GAEN,OAAOA,EAASC,UAEhBF,MAAK,SAACrE,GAAU,IAAD,MACf+E,EAAWkB,GACXjB,EAAehF,GAEf,IAAMmG,GAAW,OAACnG,QAAD,IAACA,GAAD,UAACA,EAAMkB,mBAAP,aAAC,EAAmBC,KAAOnB,EAAKkB,YAAYC,IAAM,SAC7DiF,GAAY,OAACpG,QAAD,IAACA,GAAD,UAACA,EAAMkB,mBAAP,aAAC,EAAmBE,MAASpB,EAAKkB,YAAYE,MAAQ,QACxEiE,EAAa,CAACc,EAAUC,IAExB,IAAM1F,GAAO,OAACV,QAAD,IAACA,GAAD,UAACA,EAAMkB,mBAAP,aAAC,EAAmBC,KAAO,EAAI,EAC5CoE,EAAW7E,MA1BU,OA6BvB2F,QAAQC,IAAIpF,GA7BW,2CAAH,sDAgCrB,OACC,yBAAK5B,UAAU,OACd,yBAAKA,UAAU,aACd,yBAAKA,UAAU,eACd,gDACA,kBAACiH,EAAA,EAAD,CAAajH,UAAU,iBACtB,kBAACkH,EAAA,EAAD,CAAQC,QAAQ,WAAWC,SAAUX,EAAiBlD,MAAO7B,GAC5D,kBAAC2F,EAAA,EAAD,CAAU9D,MAAM,aAAhB,aACCd,EAAUhB,KAAI,SAACC,GAAD,OAAa,kBAAC2F,EAAA,EAAD,CAAU9D,MAAO7B,EAAQ6B,OAAQ7B,EAAQ2E,YAKxE,yBAAKrG,UAAU,cACd,kBAAC,EAAD,CACCL,OAAK,EACLD,OAAsB,UAAd8B,EACRzB,QAAS,SAACuH,GAAD,OAAOlB,EAAa,UAC7B5G,MAAM,oBACNC,MAAOqB,EAAgBc,EAAY2F,YACnC3H,MAAOkB,EAAgBc,EAAYnC,SAEpC,kBAAC,EAAD,CACCC,OAAsB,cAAd8B,EACRzB,QAAS,SAACuH,GAAD,OAAOlB,EAAa,cAC7B5G,MAAM,YACNC,MAAOqB,EAAgBc,EAAY4F,gBACnC5H,MAAOkB,EAAgBc,EAAYrB,aAEpC,kBAAC,EAAD,CACCZ,OAAK,EACLD,OAAsB,WAAd8B,EACRzB,QAAS,SAACuH,GAAD,OAAOlB,EAAa,WAC7B5G,MAAM,SACNC,MAAOqB,EAAgBc,EAAYpB,QACnCZ,MAAOkB,EAAgBc,EAAYpB,WAOrC,kBAAC,EAAD,CAAKgB,UAAWA,EAAWiB,UAAWyD,EAAc/E,OAAQ2E,EAAW1E,KAAM4E,KAI9E,kBAAClG,EAAA,EAAD,CAAME,UAAU,cACf,kBAACC,EAAA,EAAD,KACC,qDACA,kBAAC,EAAD,CAAOwC,UAAWkD,IAClB,wBAAI3F,UAAU,mBAAd,iBAA+CwB,GAC/C,kBAAC,EAAD,CAAWxB,UAAU,aAAawB,UAAWA,QCzH9BiG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtD,MAAK,SAAAuD,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1B,QAAQ0B,MAAMA,EAAMC,a","file":"static/js/main.f49c5a23.chunk.js","sourcesContent":["import React from 'react';\r\nimport './InfoBox.css';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nconst Infobox = ({ title, cases, active, isRed, total, ...props }) => {\r\n\treturn (\r\n\t\t<Card\r\n\t\t\tonClick={props.onClick}\r\n\t\t\tclassName={`infoBox ${active && 'infoBox--selected'} \r\n\t\t\t${isRed && \"infoBox--red\"}\r\n\t\t\t`}>\r\n\t\t\t<CardContent>\r\n\t\t\t\t<Typography className=\"infoBox__title\" color=\"textSecondary\">\r\n\t\t\t\t\t{title}\r\n\t\t\t\t</Typography>\r\n\r\n\t\t\t\t<h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>{cases}</h2>\r\n\r\n\t\t\t\t<Typography className=\"infoBox__total\" color=\"textSecondary\">\r\n\t\t\t\t\t{total} Total\r\n\t\t\t\t</Typography>\r\n\t\t\t</CardContent>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nexport default Infobox;\r\n","import React from 'react';\r\nimport numeral from 'numeral';\r\n\r\nimport { Circle, Popup } from 'react-leaflet';\r\n\r\nconst casesTypeColors = {\r\n\tcases     : {\r\n\t\thex        : '#CC1034',\r\n\t\tmultiplier : 800\r\n\t},\r\n\trecovered : {\r\n\t\thex        : '#7dd71d',\r\n\t\tmultiplier : 1200\r\n\t},\r\n\tdeaths    : {\r\n\t\thex        : '#fb4443',\r\n\t\tmultiplier : 2000\r\n\t}\r\n};\r\n\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [ ...data ];\r\n\r\n\treturn sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n\t\r\n\tstat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n// Draw circles on the map with interective tooltips\r\n\r\nexport const showDataOnMap = (data, casesType = 'cases') =>\r\n\tdata.map((country) => (\r\n\t\t<Circle\r\n\t\t\tcenter={[ country.countryInfo.lat, country.countryInfo.long ]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className=\"info-container\">\r\n               <div\r\n                  className=\"info-flag\"\r\n                  style={{ backgroundImage: `url(${country.countryInfo.flag})` }} />\r\n\t\t\t\t\t<div className=\"info-name\">{country.country}</div>\r\n\t\t\t\t\t<div className=\"info-confirmed\">Cases: {numeral(country.cases).format('0,0')}</div>\r\n\t\t\t\t\t<div className=\"info-recovered\">Recovered: {numeral(country.recovered).format('0,0')}</div>\r\n\t\t\t\t\t<div className=\"info-deaths\">Deaths: {numeral(country.deaths).format('0,0')}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n","import React from 'react';\r\nimport { Map as LeafMap, TileLayer } from 'react-leaflet';\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nconst Map = (props) => {\r\n\treturn (\r\n\t\t<div className=\"map\">\r\n\t\t\t\r\n\t\t\t<LeafMap center={props.center} zoom={props.zoom}>\r\n\t\t\t\t<TileLayer\r\n\t\t\t\t\turl=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n\t\t\t\t\tattribution='&copy; <a href=\"https://osm.org/copyright\">\r\n\t\t\t\t\tOpenStreetMap</a> contributors'\r\n\t\t\t\t/>\r\n\t\t\t\t{showDataOnMap(props.countries, props.casesType)}\r\n\t\t\t</LeafMap>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Map;\r\n","import React from 'react';\r\nimport './Table.css';\r\n\r\nconst Table = ({ countries }) => {\r\n\treturn (\r\n\t\t<div className=\"table\">\r\n\t\t\t{countries.map(({ country, cases }) => (\r\n\t\t\t\t<tr>\r\n\t\t\t\t\t{/* Emmet */}\r\n\t\t\t\t\t<td>{country}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<strong>{cases}</strong>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Table;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\nimport numeral from 'numeral';\r\n\r\nconst options = {\r\n   legend: {\r\n       display: false,\r\n   },\r\n   elements: {\r\n       point: {\r\n           radius: 0,\r\n       },\r\n   },\r\n   maintainAspectRatio: false,\r\n   tooltips: {\r\n       mode: \"index\",\r\n       intersect: false,\r\n       callbacks: {\r\n           label: function (tooltipItem, data) {\r\n               return numeral(tooltipItem.value).format(\"+0,0\");\r\n           },\r\n       },\r\n   },\r\n   scales: {\r\n       xAxes: [\r\n           {\r\n               type: \"time\",\r\n               time: {\r\n                   format: \"MM/DD/YYYY\",\r\n                   tooltipFormate: \"ll\",\r\n               },\r\n           },\r\n       ],\r\n       yAxes: [\r\n           {\r\n               gridLines: {\r\n                   display: false,\r\n               },\r\n               ticks: {\r\n                   callbacks: function (value, index, values) {\r\n                       return numeral(value).format(\"0a\");\r\n                   },\r\n               },\r\n           },\r\n       ],\r\n   },\r\n};\r\n\r\n\r\nconst LineGraph = ({casesType = \"cases\", ...props}) => {\r\n\tconst [ data, setData ] = useState({});\r\n\r\n\tconst buildChartData = (data, casesType = 'cases') => {\r\n\t\tconst chartData = [];\r\n\t\tlet lastDataPoint;\r\n\t\tfor (let date in data.cases) {\r\n\t\t\tif (lastDataPoint) {\r\n\t\t\t\tconst newDataPoint = {\r\n\t\t\t\t\tx : date,\r\n\t\t\t\t\ty : data[casesType][date] - lastDataPoint\r\n\t\t\t\t};\r\n\t\t\t\tchartData.push(newDataPoint);\r\n\t\t\t}\r\n\t\t\tlastDataPoint = data[casesType][date];\r\n\t\t}\r\n\t\treturn chartData;\r\n\t};\r\n\r\n\tuseEffect(() => {\r\n\t\tconst fetchData = async () => {\r\n\t\t\tawait fetch('http://disease.sh/v3/covid-19/historical/all?lastdays=120')\r\n\t\t\t\t.then((response) => response.json())\r\n\t\t\t\t.then((data) => {\r\n\t\t\t\t\tconst chartData = buildChartData(data, casesType);\r\n\t\t\t\t\tsetData(chartData);\r\n\t\t\t\t});\r\n\t\t};\r\n\r\n\t\tfetchData();\r\n\t}, [casesType]);\r\n\r\n\treturn (\r\n\t\t<div className={props.className}>\r\n\t\t\t{data &&\r\n\t\t\tdata.length > 0 && (\r\n            <Line \r\n            options={options}\r\n            data={{\r\n                datasets: [\r\n                    {\r\n                        backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                        borderColor: \"#CC1034\",\r\n                        data: data\r\n                    }\r\n                ]\r\n            }}\r\n        />\r\n\t\t\t)}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default LineGraph;\r\n","import React, { useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport './App.css';\nimport Infobox from './infoBox';\nimport Map from './Map';\nimport Table from './Table';\nimport { sortData, prettyPrintStat } from './util';\nimport LineGraph from './LineGraph';\nimport 'leaflet/dist/leaflet.css';\n\nfunction App() {\n\tconst [ countries, setCountries ] = useState([]);\n\tconst [ country, setCountry ] = useState('worldwide');\n\tconst [ countryInfo, setCountryInfo ] = useState({});\n\tconst [ tableData, setTableData ] = useState([]);\n\tconst [ mapCenter, setMapCenter ] = useState({ lat: 34.80746, lng: -40.4796 });\n\tconst [ mapZoom, setMapZoom ] = useState(3);\n\tconst [ mapCountries, setMapCountries ] = useState([]);\n\tconst [ casesType, setCasesType ] = useState('cases');\n\t// STATE = How to write a variable in REACT <<<<<<<<<<<<\n\n\t// USEEFFECT = Runs a piece of code\n\t// based on a given condition\n\n\tuseEffect(() => {\n\t\tfetch('https://disease.sh/v3/covid-19/all').then((response) => response.json()).then((data) => {\n\t\t\tsetCountryInfo(data);\n\t\t});\n\t}, []);\n\n\tuseEffect(() => {\n\t\t// The code inside here will run once\n\t\t// when the component loads and not again\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch('https://disease.sh/v3/covid-19/countries').then((response) => response.json()).then((data) => {\n\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\tname  : country.country,\n\t\t\t\t\tvalue : country.countryInfo.iso2\n\t\t\t\t}));\n\n\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\tsetTableData(sortedData);\n\t\t\t\tsetMapCountries(data);\n\t\t\t\tsetCountries(countries);\n\t\t\t});\n\t\t};\n\n\t\tgetCountriesData();\n\t}, []); //but when variable Countries changes, this code will run as well.\n\n\tconst onCountryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\t\tsetCountry(countryCode);\n\n\t\tlet url;\n\n\t\tif (countryCode === 'worldwide') {\n\t\t\turl = 'https://disease.sh/v3/covid-19/all';\n\t\t} else {\n\t\t\turl = `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\t}\n\n\t\tawait fetch(url)\n\t\t\t.then((response) => {\n\t\t\t\t// console.log( response.json());\n\t\t\t\treturn response.json();\n\t\t\t})\n\t\t\t.then((data) => {\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\tsetCountryInfo(data);\n\n\t\t\t\tconst latitude = (data?.countryInfo?.lat) ? data.countryInfo.lat : 34.80746;\n\t\t\t\tconst longitude = (data?.countryInfo?.long)  ? data.countryInfo.long : -40.4796;\n\t\t\t\tsetMapCenter([latitude, longitude]);\n\t\t\t\t\n\t\t\t\tconst zoom = (data?.countryInfo?.lat) ? 3 : 2;\n\t\t\t\tsetMapZoom(zoom);\n\t\t\t});\n\n\t\tconsole.log(countryInfo);\n\t};\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>COVID-19 TRACKER</h1>\n\t\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t\t<Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n\t\t\t\t\t\t\t<MenuItem value=\"worldwide\">Worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country) => <MenuItem value={country.value}>{country.name}</MenuItem>)}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"app__stats\">\n\t\t\t\t\t<Infobox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === 'cases'}\n\t\t\t\t\t\tonClick={(e) => setCasesType('cases')}\n\t\t\t\t\t\ttitle=\"Coronavirus Cases\"\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.cases)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Infobox\n\t\t\t\t\t\tactive={casesType === 'recovered'}\n\t\t\t\t\t\tonClick={(e) => setCasesType('recovered')}\n\t\t\t\t\t\ttitle=\"Recovered\"\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.recovered)}\n\t\t\t\t\t/>\n\t\t\t\t\t<Infobox\n\t\t\t\t\t\tisRed\n\t\t\t\t\t\tactive={casesType === 'deaths'}\n\t\t\t\t\t\tonClick={(e) => setCasesType('deaths')}\n\t\t\t\t\t\ttitle=\"Deaths\"\n\t\t\t\t\t\tcases={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t\ttotal={prettyPrintStat(countryInfo.deaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\n\t\t\t\t{/* Header */}\n\t\t\t\t{/* Title + Select input dropdown field */}\n\n\t\t\t\t<Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={mapZoom} />\n\t\t\t\t{/* Map */}\n\t\t\t</div>\n\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n\t\t\t\t\t<Table countries={tableData} />\n\t\t\t\t\t<h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph className=\"app__graph\" casesType={casesType} />\n\t\t\t\t\t{/* Graph */}\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}